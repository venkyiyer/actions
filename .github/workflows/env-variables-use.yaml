# Environment variables are db connections, etc. 
name: env variables
on: 
  push:
    branches: 
      - main

jobs:
  test:
    env: # This job will connect to the web version of Mongo DB. You can declare this on job level/ workflow level depending on the usecase
    # Suppose you use a different db for development phase and different db for deployment phase. Under such scenario, you can use the env
    # variable declaration in job level
      MONGODB_CLUSTER_ADDRESS: cluster0
      MONGODB_USERNAME: venk
      MONGODB_PASSWORD: abcd
      MONGODB_PORT: 8080
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Install dependencies
        run: npm ci
      - name: Lint code
        run: npm run lint
      - name: Test code
        run: npm run test
  
  build: 
    needs: test
    runs-on: ubuntu-latest
    outputs:
      script-file: ${{steps.publish.outputs.some-file-name}}
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Install dependencies
        run: npm ci
      - name: Build website
        run: npm run build
      - name: Publish JS file name
        id: publish
        run: find dist/assets/*.js -type f -execdir echo 'some-file-name={}' >> GITHUB_OUTPUT ';' # To find the js file name in the given path and display the name of the js file
      - name: upload artifacts # This step is used to store some artifact that is generated when we build the code. This can be manually downloaded on click
        uses: actions/upload-artifact@v3 # To upload the artifacts that can be downloaded on button click
        with:
          name: My demo artifacts
          path: |
            dist
            package.json
  deploy: 
  needs: buid
  runs-on: ubuntu-latest
  steps:
    - name: Get build artifacts
      uses: actions/download-artifact@v3 # This step to automatically download the artifacts
      with: 
        name: dist-files # As this is produced in the test step, we will be downloading the same artifact automatically
    - name: Output contents
      run: ls
    - name: Use the output file
      run: echo "${{needs.build.outputs.script-file}}"
    - name: Deploy
      run: echo 'Deploying....'